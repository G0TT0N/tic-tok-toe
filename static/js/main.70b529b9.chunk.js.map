{"version":3,"sources":["index.js"],"names":["calculateWinner","squares","lines","i","length","a","b","c","Square","props","className","onClick","value","Board","this","renderSquare","React","Component","Game","state","history","Array","fill","stepNumber","xIsNext","slice","setState","concat","step","status","current","winner","moves","map","move","desc","key","jumpTo","handleClick","ReactDOM","render","document","getElementById"],"mappings":"wNAIA,SAASA,EAAgBC,GAWrB,IAVA,IAAMC,EAAQ,CACV,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEFC,EAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CAAC,IAAD,cACjBD,EAAMC,GADW,GAC5BE,EAD4B,KACzBC,EADyB,KACtBC,EADsB,KAEnC,GAAIN,EAAQI,IAAMJ,EAAQI,KAAOJ,EAAQK,IAAML,EAAQI,KAAOJ,EAAQM,GAClE,OAAON,EAAQI,GAGvB,OAAO,KAGX,IAAIG,EAAS,SAACC,GACV,OACI,4BACIC,UAAU,SACVC,QAASF,EAAME,SAEdF,EAAMG,QAKbC,E,qLACWV,GAAI,IAAD,OACZ,OAAO,kBAACK,EAAD,CACHI,MAAOE,KAAKL,MAAMR,QAAQE,GAC1BQ,QAAS,kBAAM,EAAKF,MAAME,QAAQR,Q,+BAKtC,OACI,6BACI,yBAAKO,UAAU,aACVI,KAAKC,aAAa,GAClBD,KAAKC,aAAa,GAClBD,KAAKC,aAAa,IAEvB,yBAAKL,UAAU,aACVI,KAAKC,aAAa,GAClBD,KAAKC,aAAa,GAClBD,KAAKC,aAAa,IAEvB,yBAAKL,UAAU,aACVI,KAAKC,aAAa,GAClBD,KAAKC,aAAa,GAClBD,KAAKC,aAAa,S,GAxBnBC,IAAMC,WA+BpBC,E,YACF,WAAYT,GAAQ,IAAD,8BACf,4CAAMA,KACDU,MAAQ,CACTC,QAAS,CAAC,CACNnB,QAASoB,MAAM,GAAGC,KAAK,QAE3BC,WAAY,EACZC,SAAS,GAPE,E,yEAWPrB,GAER,IAAMiB,EAAUN,KAAKK,MAAMC,QAAQK,MAAM,EAAGX,KAAKK,MAAMI,WAAa,GAE9DtB,EADUmB,EAAQA,EAAQhB,OAAS,GACjBH,QAAQwB,QAC5BzB,EAAgBC,IAAYA,EAAQE,KAGxCF,EAAQE,GAAKW,KAAKK,MAAMK,QAAU,IAAM,IACxCV,KAAKY,SAAS,CACVN,QAASA,EAAQO,OAAO,CAAC,CACrB1B,QAASA,KAEbsB,WAAYH,EAAQhB,OACpBoB,SAAUV,KAAKK,MAAMK,a,6BAItBI,GACHd,KAAKY,SAAS,CACVH,WAAYK,EACZJ,QAAUI,EAAO,IAAO,M,+BAItB,IAcFC,EAdC,OACCT,EAAUN,KAAKK,MAAMC,QACrBU,EAAUV,EAAQN,KAAKK,MAAMI,YAC7BQ,EAAS/B,EAAgB8B,EAAQ7B,SACjC+B,EAAQZ,EAAQa,IAAI,SAACL,EAAMM,GAC7B,IAAMC,EAAOD,EACP,WAAaA,EACb,kBACN,OACI,wBAAIE,IAAKF,GACL,4BAAQvB,QAAS,kBAAM,EAAK0B,OAAOH,KAAQC,MAWvD,OAJMN,EADNE,EACe,WAAaA,EACb,iBAAmBjB,KAAKK,MAAMK,QAAU,IAAM,KAIzD,yBAAKd,UAAU,QACX,yBAAKA,UAAU,cACX,kBAACG,EAAD,CACIZ,QAAS6B,EAAQ7B,QACjBU,QAAS,SAACR,GAAD,OAAO,EAAKmC,YAAYnC,OAGzC,yBAAKO,UAAU,aACX,iCAAOmB,EAAP,KACA,4BAAKG,S,GApENhB,IAAMC,WA2EzBsB,IAASC,OACL,kBAACtB,EAAD,MACAuB,SAASC,eAAe,U","file":"static/js/main.70b529b9.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nfunction calculateWinner(squares) { // проверка победителя, приходит массив\n    const lines = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6],\n    ];\n    for (let i = 0; i < lines.length; i++) {\n        const [a, b, c] = lines[i]; // [0, 1, 2] и т.д.\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) { //\n            return squares[a];\n        }\n    }\n    return null;\n}\n\nlet Square = (props) => {\n    return (\n        <button\n            className=\"square\"\n            onClick={props.onClick} /*  вызов функции */\n        >\n            {props.value}\n        </button>\n    );\n};\n\nclass Board extends React.Component {\n    renderSquare(i) {\n        return <Square\n            value={this.props.squares[i]} // установить value ячеек значениями\n            onClick={() => this.props.onClick(i)} // переносим функцию\n        />\n    }\n\n    render() {\n        return (\n            <div>\n                <div className=\"board-row\">\n                    {this.renderSquare(0)}\n                    {this.renderSquare(1)}\n                    {this.renderSquare(2)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(3)}\n                    {this.renderSquare(4)}\n                    {this.renderSquare(5)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(6)}\n                    {this.renderSquare(7)}\n                    {this.renderSquare(8)}\n                </div>\n            </div>\n        );\n    }\n}\n\nclass Game extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            history: [{\n                squares: Array(9).fill(null), // заполнить все ячейки массива null\n            }],\n            stepNumber: 0,\n            xIsNext: true, // изначально первым ходят Х\n        }\n    }\n\n    handleClick(i) {\n        debugger\n        const history = this.state.history.slice(0, this.state.stepNumber + 1); // расшряемый массив объектов [{squares}, ...arg]\n        const current = history[history.length - 1]; // всегда выбирает последний добавленный объект из массива\n        const squares = current.squares.slice(); // сохраняем копию массива squares\n        if (calculateWinner(squares) || squares[i]) {\n            return;\n        }\n        squares[i] = this.state.xIsNext ? 'X' : 'O'; // если true то Х иначе О\n        this.setState({\n            history: history.concat([{ // разбирает до объекта и добавляет в конец массива\n                squares: squares,\n            }]),\n            stepNumber: history.length, // по количеству внутренних объектов\n            xIsNext: !this.state.xIsNext, // по клику false или true\n        });\n    }\n\n    jumpTo(step) {\n        this.setState({\n            stepNumber: step,\n            xIsNext: (step % 2) === 0\n        })\n    }\n\n    render() {\n        const history = this.state.history; // [{squores}]\n        const current = history[this.state.stepNumber]; // {squores}\n        const winner = calculateWinner(current.squares); // [arr], в начале winner = null\n        const moves = history.map((step, move) => {\n            const desc = move\n                ? 'Run to #' + move\n                : 'Return to start';\n            return (\n                <li key={move}>\n                    <button onClick={() => this.jumpTo(move)}>{desc}</button>\n                </li>\n            )\n        });\n        let status;\n\n        winner\n            ? status = 'Winner: ' + winner\n            : status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O'); // если true то ходят Х иначе О\n\n\n        return (\n            <div className=\"game\">\n                <div className=\"game-board\">\n                    <Board\n                        squares={current.squares}\n                        onClick={(i) => this.handleClick(i)}\n                    />\n                </div>\n                <div className=\"game-info\">\n                    <div> {status} </div>\n                    <ol>{moves}</ol>\n                </div>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(\n    <Game/>,\n    document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}